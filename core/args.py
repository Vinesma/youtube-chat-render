import os
import argparse

class Args:
    """
        Manage command line arguments
    """
    _main_dir = os.path.abspath('.')
    start_positions = ["START", "VIDEOGEN", "OVERLAY"]

    def __init__(
        self,
        input_chat_path = os.path.join(_main_dir, 'files', 'chat.txt'),
        input_video_path = os.path.join(_main_dir, 'video.mp4'),
        output_frames_path = os.path.join(_main_dir, 'frames'),
        output_chat_path = os.path.join(_main_dir, 'chat.mp4'),
        chat_font_size = 14,
        chat_message_spacing = 2,
        chat_message_amount = 25,
        chat_width = 300,
        overlay_position_x = 0,
        overlay_position_y = 0,
        overlay_opacity = 0.8,
        start_at = "START",
        dry_run = False,
        no_clean = False,
        ):
        self.verbose = False
        self.input_chat_path = input_chat_path
        self.input_video_path = input_video_path
        self.output_frames_path = output_frames_path
        self.output_chat_path = output_chat_path
        self.chat_font_size = chat_font_size
        self.chat_message_spacing = chat_message_spacing
        self.chat_message_amount = chat_message_amount
        self.chat_width = chat_width
        self.overlay_position_x = overlay_position_x
        self.overlay_position_y = overlay_position_y
        self.overlay_opacity = overlay_opacity
        self.start_at = start_at
        self.dry_run = dry_run
        self.no_clean = no_clean

    def load_args(self):
        """
            Load arguments from the user
        """
        parser = argparse.ArgumentParser(description="Generate a frame perfect youtube chat for your needs!")

        # Args
        # optional
        parser.add_argument("-v", "--verbose", help="Control the output in your terminal, passing this flag increases output.", action="store_true")
        parser.add_argument("-ic", "--input-chat", help="Chat file to parse, needs to be generated by chat_downloader and can't be a .json file. Default = 'files/chat.txt'")
        parser.add_argument("-iv", "--input-video", help="The video file to overlay the chat on. Default = 'video.mp4'")
        parser.add_argument("-of", "--output-frames", help="Where to output the frames, WARNING: This folder will get very full. Default = 'frames/'")
        parser.add_argument("-oc", "--output-chat", help="Where to ouput the generated chat video. Default = '.'")
        parser.add_argument("-cfs", "--chat-font-size", help="The pixel font size of the chat. Default = 14", type=int)
        parser.add_argument("-cms", "--chat-spacing", help="The pixel spacing of the messages. Default = 2", type=int)
        parser.add_argument("-cma", "--chat-message-amount", help="The max amount of messages to show up at once inside the chat window. Affects chat height. Default = 25", type=int)
        parser.add_argument("-cw", "--chat-width", help="Chat video width in pixels. Default = 300", type=int)
        parser.add_argument("-opx", "--overlay-position-x", help="The X value of the overlay position of the chat window on the video. (0 = Left) Default = 0")
        parser.add_argument("-opy", "--overlay-position-y", help="The Y value of the overlay position of the chat window on the video. (0 = Top) Default = 0")
        parser.add_argument("-oop", "--overlay-opacity", help="The opacity of the overlay. Default = 0.8", type=float)
        parser.add_argument("-s", "--start-at", choices=self.start_positions, help="Which step to start the program on. Useful if an error happened and you wish to continue where it left off. Values: 'START': Default, start from parsing chat file. 'VIDEOGEN': Start from generating the video out of the frames. 'OVERLAY': Start from overlaying chat onto the video.")
        parser.add_argument("-nop", "--dry-run", help="If this argument is present, only generate 30 seconds of chat and overlay it onto 30 seconds of video. For testing purposes.", action="store_true")
        parser.add_argument("-ncl", "--no-clean", help="By default the program wipes every non essential file after completion. Pass this flag to keep the files.", action="store_true")
        
        args = parser.parse_args()
        
        if args.verbose:
            self.verbose = True

        if args.input_chat is not None:
            self.input_chat_path = args.input_chat

        if args.input_video is not None:
            self.input_video_path = args.input_video

        if args.output_frames is not None:
            self.output_frames_path = args.output_frames

        if args.output_chat is not None:
            self.output_chat_path = args.output_chat
        
        if args.chat_font_size is not None:
            self.chat_font_size = args.chat_font_size
            
        if args.chat_spacing is not None:
            self.chat_message_spacing = args.chat_spacing

        if args.chat_message_amount is not None:
            self.chat_message_amount = args.chat_message_amount

        if args.chat_width is not None:
            self.chat_width = args.chat_width

        if args.overlay_position_x is not None:
            self.overlay_position_x = args.overlay_position_x

        if args.overlay_position_y is not None:
            self.overlay_position_y = args.overlay_position_y

        if args.overlay_opacity is not None:
            self.overlay_opacity = args.overlay_opacity
        
        if args.start_at is not None:
            self.start_at = args.start_at

        if args.dry_run:
            self.dry_run = args.dry_run

        if args.no_clean:
            self.no_clean = args.no_clean